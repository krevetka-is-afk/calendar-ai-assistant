services:
  calendar-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-calendar-api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - DEFAULT_TIMEZONE=Europe/Moscow
      - OLLAMA_URL=http://ollama:11434
      - USE_LLM=true
      - DATABASE_URL=postgresql+psycopg2://calendar:calendar123@postgres:5432/smart_calendar
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      model-puller:
        condition: service_completed_successfully
    networks:
      - calendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama — порт наружу не публикуем, сервисы общаются по сети compose
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - calendar-network
    restart: unless-stopped
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      # в официальном образе нет curl — используем CLI
      test: ["CMD", "ollama", "list"]
      interval: 5s
      timeout: 5s
      retries: 30

  # Одноразовый сайдкар — тянет модель через REST, когда Ollama уже здорова
  model-puller:
    image: curlimages/curl:8.10.1
    depends_on:
      ollama:
        condition: service_healthy
    networks: [calendar-network]
    restart: "no"
    command:
      - "-sf"
      - "-X"
      - "POST"
      - "http://ollama:11434/api/pull"
      - "-H"
      - "Content-Type: application/json"
      - "-d"
      - '{"name":"qwen3:8b"}'

  postgres:
    image: postgres:15-alpine
    container_name: calendar-db
    environment:
      - POSTGRES_USER=calendar
      - POSTGRES_PASSWORD=calendar123
      - POSTGRES_DB=smart_calendar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - calendar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  calendar-network:
    driver: bridge

volumes:
  ollama_data:
  postgres_data:
