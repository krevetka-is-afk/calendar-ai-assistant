"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""
import streamlit as st

from app.core.config import NAVIGATION
from app.core.state_manager import StateManager
from app.core.calendar_utils import GoogleCalendarService, process_events_for_analysis
from app.core.ai_utils import get_ai_assistant
from app.core.ui_components import (
    render_authorization_status, render_calendar_selector,
    render_heatmap, render_events_table, render_weekly_timetable_plotly,
    render_loading_spinner, render_error_message, render_warning_message,
    render_info_message
)


def render_analytics_page():
    """–†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    is_authorized = StateManager.is_authorized()
    render_authorization_status(is_authorized)
    
    if not is_authorized:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google Calendar")
        
        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if st.button("üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google"):
            try:
                with render_loading_spinner("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google..."):
                    calendar_service = GoogleCalendarService()
                    service = calendar_service.get_service()
                    
                    if service:
                        StateManager.set_service(service)
                        StateManager.set_authorized(True)
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_email = calendar_service.get_user_email(service)
                        StateManager.set_user_email(user_email)
                        
                        st.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        st.rerun()
                    else:
                        render_error_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å Google Calendar")
                        
            except Exception as e:
                render_error_message(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
    service = StateManager.get_service()
    calendar_service = GoogleCalendarService()
    
    try:
        calendars = calendar_service.get_calendars(service)
        
        # –í—ã–±–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        selected_calendars = render_calendar_selector(calendars)
        
        if selected_calendars:
            # –ò–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π
            if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"):
                try:
                    with render_loading_spinner("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π..."):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
                        filtered_calendars = {name: cal_id for name, cal_id in calendars.items() 
                                           if name in selected_calendars}
                        
                        user_email = StateManager.get_user_email()
                        events_data = calendar_service.fetch_events(service, filtered_calendars, user_email)
                        
                        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(events_data[0]['events'])} —Å–æ–±—ã—Ç–∏–π")
                        st.rerun()
                        
                except Exception as e:
                    render_error_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            data = None
            try:
                data = calendar_service.load_events_data()
            except Exception as e:
                render_error_message(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                data = None

            if data is None:
                render_info_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
            else:
                events = data[0]["events"]
                
                if not events:
                    render_info_message("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    df = process_events_for_analysis(events)
                    
                    # –í—ã–±–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    available_cals = sorted(df["calendar"].unique())
                    selected_calendars_display = st.multiselect(
                        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", 
                        available_cals,
                        default=available_cals
                    )

                    if selected_calendars_display:
                        df_selected = df[df["calendar"].isin(selected_calendars_display)]

                        # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º –¥–ª—è timetable/—Å–µ—Ç–∫–∏
                        weekday_hour_counts = {}
                        for _, row in df_selected.iterrows():
                            key = (row["weekday"], row["hour"])
                            weekday_hour_counts[key] = weekday_hour_counts.get(key, 0) + 1

                        viz_options = ["Heatmap", "Timetable", "Bar Chart"]
                        choice = st.radio("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", viz_options, index=1)

                        if choice == "Heatmap":
                            st.subheader("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                            heatmap_data = df_selected.groupby(["weekday", "hour"])["duration_min"].sum().unstack(fill_value=0)
                            render_heatmap(heatmap_data)
                        elif choice == "Timetable":
                            st.subheader("üìÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º (–Ω–µ–¥–µ–ª—è)")

                            # weekday_hour_counts = {}
                            # for _, row in df_selected.iterrows():
                            #     key = (row['weekday'], row['hour'])
                            #     weekday_hour_counts[key] = weekday_hour_counts.get(key, 0) + 1
                            render_weekly_timetable_plotly(weekday_hour_counts)
                        else:
                            st.subheader("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
                            counts = df_selected['weekday'].value_counts().reindex(range(7), fill_value=0)
                            counts.index = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                            st.bar_chart(counts)

                        # # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è timetable
                        # weekday_hour_counts = {}
                        # for _, row in df_selected.iterrows():
                        #     key = (row['weekday'], row['hour'])
                        #     weekday_hour_counts[key] = weekday_hour_counts.get(key, 0) + 1
                        #
                        # st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
                        # render_weekly_timetable_plotly(weekday_hour_counts)

                        if choice != "Timetable":
                            st.subheader("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
                            render_weekly_timetable_plotly(weekday_hour_counts)

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π", len(df_selected))
                        with col2:
                            st.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{df_selected['duration_min'].mean():.1f} –º–∏–Ω")
                        with col3:
                            if not df_selected.empty:
                                day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                                most_busy_day = int(df_selected['weekday'].value_counts().idxmax())
                                st.metric("–°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å", day_names[most_busy_day])
                            else:
                                st.metric("–°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å", "–ù/–î")

                        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
                        render_events_table(df_selected)
                        
                        # AI –∞–Ω–∞–ª–∏–∑
                        st.subheader("ü§ñ AI –ê–Ω–∞–ª–∏–∑")
                        ai_assistant = get_ai_assistant()
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                        try:
                            ai_assistant.create_vector_store(events)
                            st.success("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                        except Exception as e:
                            render_warning_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {str(e)}")
        
    except Exception as e:
        render_error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π: {str(e)}")
